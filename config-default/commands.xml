<commands>
  <command cmd="^;query (\S+) (\S+)$">
  <![CDATA[
    my $channel = $1;
    my @nuh = split(/(\!|\@)/, $2);
    my $result = $::db->query($channel, $nuh[0], $nuh[2], $nuh[4]);
    $conn->privmsg($event->{to}->[0], "$result results found.");
  ]]>
  </command>
  <command cmd="^;user add (\S+) ?(\S*)$" flag="d">
  <![CDATA[
    my $nick = lc $1;
    my $host = $2;
    if ($host eq '') { $host = 'IDENTIFY'; }
    $::users->{person}->{$nick} = { 'host' => $host };
    ASM::XML->writeUsers();
    $conn->privmsg($event->{to}->[0], "Hiya $nick");
  ]]>
  </command>
  <command cmd="^;user flags set (\S+) ?(\S*)$" flag="d">
  <![CDATA[
    my $nick = lc $1;
    my $flags = $2;
    if ($flags eq '') { delete($::users->{person}->{$nick}->{flags}); } else {
      $::users->{person}->{$nick}->{flags} = $flags;
    }
    ASM::XML->writeUsers();
    $conn->privmsg($event->{to}->[0], "Flags for $nick set to $flags");
  ]]>
  </command>
  <command cmd="^;user del (\S+)$" flag="d">
  <![CDATA[
    my $nick = lc $1;
    delete($::users->{person}->{$nick});
    ASM::XML->writeUsers();
    $conn->privmsg($event->{to}->[0], "Byebye $nick");
  ]]>
  </command>
  <command cmd="^;user flags show (\S+)$" flag="d">
  <![CDATA[
    my $nick = lc $1;
    if (defined($::users->{person}->{$nick}->{flags})) {
      $conn->privmsg($event->{to}->[0], "Flags for $nick: $::users->{person}->{$nick}->{flags}");
    } else {
      $conn->privmsg($event->{to}->[0], "$nick has no flags");
    }
  ]]>
  </command>
  <command cmd="^;autoban (\S+)$" flag="a">
  <![CDATA[
    my $chan = $1;
    my $set = $::channels->{channel}->{$chan}->{op};
    if ($set eq "no") { $set = "when"; } else { $set = "no"; }
    $::channels->{channel}->{$chan}->{op} = $set;
    $conn->privmsg($event->{to}->[0], "Operator action for $chan set to \"$set\".");
  ]]>
  </command>
  <command cmd="^;target (\S+) (\S+) ?(\S*)$" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = $2;
    my $level= $3;
    if ($level eq '') { $level = 'low'; }
    unless (defined($::channels->{channel}->{$chan}->{msgs})) {
      $::channels->{channel}->{$chan}->{msgs} = {};
    }
    unless (defined($::channels->{channel}->{$chan}->{msgs}->{$level})) {
      $::channels->{channel}->{$chan}->{msgs}->{$level} = [];
    }
    my @tmphl = @{$::channels->{channel}->{$chan}->{msgs}->{$level}};
    push(@tmphl, $nick);
    $::channels->{channel}->{$chan}->{msgs}->{$level} = \@tmphl;
    ASM::XML->writeChannels();
    $conn->privmsg($event->{to}->[0], "$nick added to $level risk messages for $chan");
  ]]>
  </command>
  <command cmd="^;detarget (\S+) (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = $2;
    foreach my $risk ( keys %::RISKS ) {
      next unless defined($::channels->{channel}->{$chan}->{msgs}->{$risk});
      my @ppl = @{$::channels->{channel}->{$chan}->{msgs}->{$risk}};
      @ppl = grep { lc $_ ne lc $nick } @ppl;
      $::channels->{channel}->{$chan}->{msgs}->{$risk} = \@ppl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->{to}->[0], "no moar msgs for $nick");
  ]]>
  </command>
  <command cmd="^;hilight (\S+) (\S+) ?(\S*)$" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = $2;
    my $level= $3;
    if ($level eq '') { $level = 'low'; }
    unless (defined($::channels->{channel}->{$chan}->{hilights})) {
      $::channels->{channel}->{$chan}->{hilights} = {};
    }
    unless (defined($::channels->{channel}->{$chan}->{hilights}->{$level})) {
      $::channels->{channel}->{$chan}->{hilights}->{$level} = [];
    }
    my @tmphl = @{$::channels->{channel}->{$chan}->{hilights}->{$level}};
    push(@tmphl, $nick);
    $::channels->{channel}->{$chan}->{hilights}->{$level} = \@tmphl;
    ASM::XML->writeChannels();
    $conn->privmsg($event->{to}->[0], "$nick added to $level risk hilights for $chan");
  ]]>
  </command>
  <command cmd="^;dehilight (\S+) (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = $2;
    foreach my $risk ( keys %::RISKS ) {
      next unless defined($::channels->{channel}->{$chan}->{hilights}->{$risk});
      my @ppl = @{$::channels->{channel}->{$chan}->{hilights}->{$risk}};
      @ppl = grep { lc $_ ne lc $nick } @ppl;
      $::channels->{channel}->{$chan}->{hilights}->{$risk} = \@ppl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->{to}->[0], "kthxbai $nick");
  ]]>
  </command>
  <command cmd="^;join (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    unless (defined($::channels->{channel}->{$chan})) {
      $::channels->{channel}->{$chan} = { 'op' => 'no' };
      ASM::XML->writeChannels();
    }
    $conn->join($chan);
    my @autojoins = @{$::settings->{autojoins}};
    @autojoins = (@autojoins, $chan);
    $::settings->{autojoins} = \@autojoins;
    ASM::XML->writeSettings();
  ]]>
  </command>
  <command cmd="^;part (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    $conn->part($chan);
    my @autojoins = @{$::settings->{autojoins}};
    @autojoins = grep { lc $_ ne lc $chan } @autojoins;
    $::settings->{autojoins} = \@autojoins;
    ASM::XML->writeSettings();
  ]]>
  </command>
  <command cmd="^;sl (.*)" flag="d">
  <![CDATA[
    $conn->sl($1);
  ]]>
  </command>
  <command cmd="^;quit ?(.*)" flag="a">
  <![CDATA[
    $conn->quit($1);
  ]]>
  </command>
  <command cmd="^;ev (.*)" flag="d">
  <![CDATA[
    eval $1; warn $@ if $@;
  ]]>
  </command>
  <command cmd="^;rehash$" flag="a">
  <![CDATA[
    readXML();
    $conn->privmsg($event->{to}->[0], 'config files were re-read');
  ]]>
  </command>
  <command cmd="^;say (.*)" flag="t">
  <![CDATA[
    $conn->privmsg($event->{to}->[0], $1);
  ]]>
  </command>
  <command cmd="^;do (.*)" flag="t">
  <![CDATA[
    $conn->me($event->{to}->[0], $1);
  ]]>
  </command>
  <command cmd="^;exempt (.*)" flag="o">
  <![CDATA[
    push(@::eline, $1);
    "$1\n" >> io 'exempt.txt';
    $conn->privmsg($event->{to}->[0], "$1 exempted");
  ]]>
  </command>
  <command cmd="^\!ops *(.*)">
  <![CDATA[
    my $hilite=commaAndify(getAlert($event->{to}->[0], 'opalert', 'hilights'));
    $conn->privmsg($_, "$hilite: $event->{nick} wants your attention ($1) ") foreach getAlert($event->{to}->[0], 'opalert', 'msgs');
  ]]>
  </command>
  <command cmd="^;re(load|hash) exempts" flag="a">
  <![CDATA[
    @eline=io('exempt.txt')->getlines;
    chomp @eline;
  ]]>
  </command>
</commands>
