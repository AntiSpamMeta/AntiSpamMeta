<commands>
  <command cmd="^;status$" flag="o">
  <![CDATA[
    my $size = `ps -p $$ h -o size`;
    my $cputime = `ps -p $$ h -o time`;
    chomp $size; chomp $cputime;
    $conn->privmsg($event->replyto, "This bot has been running for " . (time - $::starttime) . " seconds" .
     ", is tracking " . (scalar (keys %::sn)) . " nicks" .
     " across " . (scalar (keys %::sc)) . " tracked channels." .
     " It is using " . $size . "KB of RAM" . 
     " and has used " . $cputime . " of CPU time.");
  ]]>
  </command>
  <command cmd="^;mship (\S+)$" flag="c">
  <![CDATA[
    $conn->privmsg($event->replyto, $1 . " is on: " . ASM::Util->commaAndify(@{$::sn{lc $1}->{mship}}));
  ]]>
  </command>
  <command cmd="^;source$">
  <![CDATA[
    $conn->privmsg($event->replyto, "source is at http://svn.linuxrulz.org/repos/antispammeta");
  ]]>
  </command>
  <command cmd="^;sql (main|log) (.*)" flag="d">
  <![CDATA[
    my $dbh = $::db->{DBH};
    if ($1 eq 'log') {
      $dbh = $::db->{DBH_LOG};
    }
    $::db->raw($conn, $event->{to}->[0], $dbh, $2);
  ]]>
  </command>
  <command cmd="^;monitor (\S+) (yes|no)$" flag="a">
  <![CDATA[
    my $chan = lc $1;
    my $switch = lc $2;
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    $::channels->{channel}->{$chan}->{monitor} = $switch;
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "Monitor flag for $chan set to $switch");
  ]]>
  </command>
  <command cmd="^;help$">
  <![CDATA[
    $conn->privmsg($event->replyto, "help is at http://meta.wikimedia.org/wiki/User:WHeimbigner/AntiSpamMeta");
    $conn->privmsg($event->replyto, "You can also get faster help by emailing william dot heimbigner at ttu dot edu - or bug ErrantEgo or tomaw");
  ]]>
  </command>
  <command cmd="^;db$">
  <![CDATA[
    $conn->privmsg($event->replyto, "db is at http://antispammeta.net/query.html");
  ]]>
  </command>
  <command cmd="^;query (\S+) (\S+)$">
  <![CDATA[
    my $channel = $1;
    my @nuh = split(/(\!|\@)/, $2);
    my $result = $::db->query($channel, $nuh[0], $nuh[2], $nuh[4]);
    $conn->privmsg($event->replyto, "$result results found.");
  ]]>
  </command>
  <command cmd="^;userx add (\S+) (\S+)$" flag="a">
  <![CDATA[
    my $acct = lc $1;
    my $flags = $2;
    if ($flags =~ /d/i) {
      $conn->privmsg($event->replyto, "The d flag may not be assigned over IRC. Edit the configuration manually.");
      return;
    }
    $::users->{person}->{$acct} = { 'flags' => $flags };
    ASM::XML->writeUsers();
    $conn->privmsg($event->replyto, "Flags for NickServ account $acct set to $flags");
  ]]>
  </command>
  <command cmd="^;user add (\S+) ?(\S*)$" flag="a">
  <![CDATA[
    $conn->privmsg($event->replyto, "This command has been deprecated");
  ]]>
  </command>
  <command cmd="^;userx? flags (\S+) ?$">
  <![CDATA[
    my $nick = lc $1;
    if (defined($::users->{person}->{$nick}->{flags})) {
      $conn->privmsg($event->replyto, "Flags for $nick: $::users->{person}->{$nick}->{flags}");
    } else {
      $conn->privmsg($event->replyto, "$nick has no flags");
    }
  ]]>
  </command>
  <command cmd="^;userx? flags (\S+) (\S+)$" flag="a">
  <![CDATA[
    my $nick = lc $1;
    my $flags = $2;
    if ($flags =~ /d/i) {
      $conn->privmsg($event->replyto, "The d flag may not be assigned over IRC. Edit the configuration manually.");
      return;
    }
    $::users->{person}->{$nick}->{flags} = $flags;
    ASM::XML->writeUsers();
    $conn->privmsg($event->replyto, "Flags for $nick set to $flags");
  ]]>
  </command>
  <command cmd="^;userx? del (\S+)$" flag="a">
  <![CDATA[
    my $nick = lc $1;
    delete($::users->{person}->{$nick});
    ASM::XML->writeUsers();
    $conn->privmsg($event->replyto, "Byebye $nick");
  ]]>
  </command>
  <command cmd="^;target (\S+) (\S+) ?(\S*)$" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = lc $2;
    my $level= $3;
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    if ($level eq '') { $level = 'low'; }
    unless (defined($::channels->{channel}->{$chan}->{msgs})) {
      $::channels->{channel}->{$chan}->{msgs} = {};
    }
    unless (defined($::channels->{channel}->{$chan}->{msgs}->{$level})) {
      $::channels->{channel}->{$chan}->{msgs}->{$level} = [];
    }
    my @tmphl = @{$::channels->{channel}->{$chan}->{msgs}->{$level}};
    push(@tmphl, $nick);
    $::channels->{channel}->{$chan}->{msgs}->{$level} = \@tmphl;
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "$nick added to $level risk messages for $chan");
  ]]>
  </command>
  <command cmd="^;detarget (\S+) (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = $2;
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    foreach my $risk ( keys %::RISKS ) {
      next unless defined($::channels->{channel}->{$chan}->{msgs}->{$risk});
      my @ppl = @{$::channels->{channel}->{$chan}->{msgs}->{$risk}};
      @ppl = grep { lc $_ ne lc $nick } @ppl;
      $::channels->{channel}->{$chan}->{msgs}->{$risk} = \@ppl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "$nick removed from targets for $chan");
  ]]>
  </command>
  <command cmd="^;showhilights (\S+) *$" flag="h">
  <![CDATA[
    my $nick = lc $1;
    my @channels = ();
    foreach my $chan (keys(%{$::channels->{channel}})) {
      foreach my $level (keys(%{$::channels->{channel}->{$chan}->{hilights}})) {
        if (grep(/^${nick}$/i, @{$::channels->{channel}->{$chan}->{hilights}->{$level}})) {
          push @channels, $chan . " ($level)";
        }
      }
    }
    if (! @channels) {
      $conn->privmsg($event->replyto, "$nick isn't on any hilights");
    } else {
      $conn->privmsg($event->replyto, "$nick is hilighted for " . join(', ', @channels));
    }
  ]]>
  </command>
  <command cmd="^;hilight (\S+) (\S+) ?(\S*)$" flag="h">
  <![CDATA[
    my $chan = $1;
    my @nicks = split(/,/,$2);
    my $level= $3;
    if ($level eq '') { $level = 'info'; }
    $level = lc $level;
    if ($level !~ /^(disable|debug|info|low|medium|high|opalert)$/) {
      $conn->privmsg($event->replyto, "Error: I don't recognize $level as a valid level.");
      return;
    }
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    unless (defined($::channels->{channel}->{$chan}->{hilights})) {
      $::channels->{channel}->{$chan}->{hilights} = {};
    }
    unless (defined($::channels->{channel}->{$chan}->{hilights}->{$level})) {
      $::channels->{channel}->{$chan}->{hilights}->{$level} = [];
    }
    foreach my $nick (@nicks) {
      my @tmphl = @{$::channels->{channel}->{$chan}->{hilights}->{$level}};
      push(@tmphl, $nick);
      $::channels->{channel}->{$chan}->{hilights}->{$level} = \@tmphl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, ASM::Util->commaAndify(@nicks) . " added to $level risk hilights for $chan");
  ]]>
  </command>
  <command cmd="^;dehilight (\S+) (\S+)" flag="h">
  <![CDATA[
    my $chan = $1;
    my @nicks = split(/,/, $2);
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    foreach my $risk ( keys %::RISKS ) {
      next unless defined($::channels->{channel}->{$chan}->{hilights}->{$risk});
      my @ppl = @{$::channels->{channel}->{$chan}->{hilights}->{$risk}};
      foreach my $nick (@nicks) {
        @ppl = grep { lc $_ ne lc $nick } @ppl;
      }
      $::channels->{channel}->{$chan}->{hilights}->{$risk} = \@ppl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "Removing hilights for " . ASM::Util->commaAndify(@nicks) . " in $chan");
  ]]>
  </command>
  <command cmd="^;join (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    unless (defined($::channels->{channel}->{$chan})) {
      $::channels->{channel}->{$chan} = { };
      ASM::XML->writeChannels();
    }
    $conn->join($chan);
    my @autojoins = @{$::settings->{autojoins}};
    @autojoins = (@autojoins, $chan);
    $::settings->{autojoins} = \@autojoins;
    ASM::XML->writeSettings();
  ]]>
  </command>
  <command cmd="^;part (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    $conn->part($chan);
    my @autojoins = @{$::settings->{autojoins}};
    @autojoins = grep { lc $_ ne lc $chan } @autojoins;
    $::settings->{autojoins} = \@autojoins;
    ASM::XML->writeSettings();
  ]]>
  </command>
  <command cmd="^;sl (.*)" flag="d">
  <![CDATA[
    $conn->sl($1);
  ]]>
  </command>
  <command cmd="^;quit ?(.*)" flag="a">
  <![CDATA[
    $conn->quit($1);
  ]]>
  </command>
  <command cmd="^;ev (.*)" flag="d">
  <![CDATA[
    eval $1; warn $@ if $@;
  ]]>
  </command>
  <command cmd="^;rehash$" flag="a">
  <![CDATA[
    ASM::XML->readXML();
    my @strbl = io('string_blacklist.txt')->getlines;
    chomp @strbl;
    @::string_blacklist = @strbl;
    my @eline=io('exempt.txt')->getlines;
    chomp @eline;
    %::eline = ();
    foreach my $item (@eline) {
	$::eline{lc $item} = 1;
    }
    $conn->privmsg($event->replyto, 'config files were re-read');
  ]]>
  </command>
  <command cmd="^;say (.*)" flag="t">
  <![CDATA[
    $conn->privmsg($event->replyto, $1);
  ]]>
  </command>
  <command cmd="^;do (.*)" flag="t">
  <![CDATA[
    $conn->me($event->replyto, $1);
  ]]>
  </command>
  <command cmd="^;exempt (.*)" flag="o">
  <![CDATA[
    $conn->privmsg($event->replyto, "This command is now deprecated. Use ;restrict nick/account/host lineToRestrict +notrigger instead, i.e. ;restrict account eir +notrigger");
  ]]>
  </command>
  <command cmd="^;restrict (nick|account|host) (\S+) (\+|-)([a-z]+)$" flag="o">
  <![CDATA[
    my ($type, $who, $mode, $restriction) = ($1, lc $2, $3, $4);
    if ($mode eq '-') {
      delete $::restrictions->{$type . 's'}->{$type}->{$who}->{$restriction};
      $conn->privmsg($event->replyto, "Removed $restriction restriction for $type $who");
    }
    if ($mode eq '+') {
      if (! defined($::restrictions->{$type . 's'}->{$type}->{$who})) {
        $::restrictions->{$type . 's'}->{$type}->{$who} = {};
      }
      $::restrictions->{$type . 's'}->{$type}->{$who}->{$restriction} = $restriction;
      $conn->privmsg($event->replyto, "Added $restriction restriction for $type $who");
    }
    ASM::XML->writeRestrictions();
  ]]>
  </command>
  <command cmd="^\!ops ?(#\S+)? ?(.*)" nohush="nohush">
  <![CDATA[
    if (ASM::Util->notRestricted(lc $event->{nick}, "noops")) {
      my $tgt = $event->{to}->[0];
      $tgt = $1 if (defined($1));
      my $msg = $1;
      $msg = $2 if defined($2);
      unless (defined($::ignored{$tgt}) && ($::ignored{$tgt} >= $::RISKS{'opalert'})) {
        if (lc $event->{to}->[0] eq '##linux') {
          $conn->privmsg($event->{nick}, "I've summoned op attention. In the future, please use /msg " .
                         "$conn->{_nick} !ops $event->{to}->[0] reasonGoesHere  - this allows ops to " .
                         "be notified while minimizing channel hostility.");
        } elsif (lc $event->{to}->[0] eq lc $conn->{_nick}) {
          if (lc $tgt eq lc $conn->{_nick}) { # they privmsged the bot without providing a target
            $conn->privmsg($event->{nick}, "Sorry, it looks like you've tried to use the !ops command " .
                           "via PM but haven't specified a target. Try again with /msg $conn->{_nick} " .
                           "!ops #channelGoesHere ReasonGoesHere");
            return;
          } else {
            $conn->privmsg($event->{nick}, "Thanks, I'm notifying $tgt ops.");
          }
        }
        $::ignored{$tgt} = $::RISKS{'opalert'};
        $conn->schedule(30, sub { delete($::ignored{$tgt})});
        my $hilite=ASM::Util->commaAndify(ASM::Util->getAlert($tgt, 'opalert', 'hilights'));
        my $txtz = "[\x02$tgt\x02] - $event->{nick} wants op attention ($msg) $hilite";
        my @tgts = ASM::Util->getAlert($tgt, 'opalert', 'msgs');
        ASM::Util->sendLongMsg($conn, \@tgts, $txtz);
      } else { # ops has recently been called
        if (lc $event->{to}->[0] eq '##linux') {
          $conn->privmsg($event->{nick}, "I've already been recently asked to summon op attention. " .
                         "In the future, please use /msg $conn->{_nick} !ops $event->{to}->[0] reasonGoesHere" .
                         "  - this allows ops to be notified while minimizing channel hostility.");
        } elsif (lc $event->{to}->[0] eq lc $conn->{_nick}) {
          if (lc $tgt eq lc $conn->{_nick}) { # they privmsged the bot without providing a target
            $conn->privmsg($event->{nick}, "Sorry, it looks like you've tried to use the !ops command " .
                           "via PM but haven't specified a target. Try again with /msg $conn->{_nick} " .
                           "!ops #channelGoesHere ReasonGoesHere");
            return;
          } else {
            $conn->privmsg($event->{nick}, "I've already recently notified $tgt ops.");
          }
        }
      }
    }
  ]]>
  </command>
  <command cmd="^;blacklist (.*)" flag="o">
  <![CDATA[
    my $str = lc $1;
    push(@::string_blacklist, $str);
    "$str\n" >> io 'string_blacklist.txt';
    $conn->privmsg($event->replyto, "$str blacklisted");
  ]]>
  </command>
  <command cmd="^;plugin (\S+) (\S+) (.*)" flag="p">
  <![CDATA[
    my $chan = $1;
    my $risk = $2;
    my $reason = $3;
    my $txtz = "\x03" . $::RCOLOR{$::RISKS{$risk}} . "\u$risk\x03 risk threat [\x02$chan\x02] - ".
            "\x02($event->{nick} plugin)\x02 - ${reason}; ping ";
    $txtz = $txtz . ASM::Util->commaAndify(ASM::Util->getAlert(lc $chan, $risk, 'hilights')) if (ASM::Util->getAlert(lc $chan, $risk, 'hilights'));
    $txtz = $txtz . ' !att-' . $chan . '-' . $risk;
    my @tgts = ASM::Util->getAlert($chan, $risk, 'msgs');
    if (length($txtz) <= 380) {
      $conn->privmsg(\@tgts, $txtz);
    } else {
      my $splitpart = rindex($txtz, " ", 380);
      $conn->privmsg(\@tgts, substr($txtz, 0, $splitpart));
      $conn->privmsg(\@tgts, substr($txtz, $splitpart));
    }
  ]]>
  </command>
</commands>
