<commands>
  <command cmd="^;;addwebuser (\S+)" flag="s">
  <![CDATA[
    my $pass = $1;
    if ($event->{to}->[0] =~ /^#/) {
      $conn->privmsg($event->replyto, "This command must be used in PM. Try again WITH A DIFFERENT PASSWORD!");
      return;
    }
    use Apache::Htpasswd; use Apache::Htgroup;
    my $o_Htpasswd = new Apache::Htpasswd({passwdFile => $::settings->{web}->{userfile}, UseMD5 => 1});
    my $o_Htgroup = new Apache::Htgroup($::settings->{web}->{groupfile});
    my $user = lc $::sn{lc $event->{nick}}->{account};
    $o_Htpasswd->htDelete($user);
    $o_Htpasswd->htpasswd($user, $pass);
    $o_Htpasswd->writeInfo($user, strftime("%F %T", gmtime));
    $o_Htgroup->adduser($user, 'actionlogs');
    $o_Htgroup->save();
    $conn->privmsg($event->replyto, "Added $user to the list of authorized web users.")
  ]]>
  </command>
  <command cmd="^;makemelunch">
  <![CDATA[
    $conn->me($event->replyto, "makes " . $event->{nick} . " a sandwich");
  ]]>
  </command>
  <command cmd="^;teredo (\S+)">
  <![CDATA[
    my $arg1 = $1;
    my @splitip = split(/:/, $arg1);
    if ( (int($splitip[0]) != 2001) || (int($splitip[1]) != 0) ) {
      $conn->privmsg($event->replyto, "This is not a teredo-tunnelled IP.");
      return;
    }
    my $server = join('.', unpack('C4', pack('N', hex($splitip[2] . $splitip[3]))));
    my $host = join('.', unpack('C4', pack('N', (hex($splitip[6] . $splitip[7])^hex('ffffffff')))));
    my $port = hex($splitip[5]) ^ hex('ffff');
    $conn->privmsg($event->replyto, "Source is $host:$port; teredo server in use is $server.");
#hex('41379e76') ^ hex('ffffffff'); print join ('.', unpack('C4', pack('N', $ip))) . "\n"
#join '.', unpack "C*", pack "H*", $ip;
    #2001:0:4137:9e76:3094:127d:51a2:6952
    #2001:0 - teredo marker
    #4137:9e76 - teredo server
    #3094 - teredo flags
    #127d - xor 0xff - UDP port in use
    #51a2:6952 - xor 0xff - source IP
  ]]>
  </command>
  <command cmd="^;status$">
  <![CDATA[
    my $size = `ps -p $$ h -o size`;
    my $cputime = `ps -p $$ h -o time`;
    chomp $size; chomp $cputime;
    my $upstr = '';
    my $up = (time - $::starttime);
    if (int($up/86400) != 0) { #days
      $upstr = $upstr . int($up/86400) . 'd';
      $up = $up % 86400;
    }
    if (int($up/3600) != 0) { #hours
      $upstr = $upstr . int($up/3600) . 'h';
      $up = $up % 3600;
    }
    if (int($up/60) != 0) { #minutes
      $upstr = $upstr . int($up/60) . 'm';
      $up = $up % 60;
    }
    if (int($up/1) != 0) { #seconds
      $upstr = $upstr . int($up/1) . 's';
      $up = $up % 1;
    }
    $conn->privmsg($event->replyto, "This bot has been running for " . $upstr .
     ", is tracking " . (scalar (keys %::sn)) . " nicks" .
     " across " . (scalar (keys %::sc)) . " tracked channels." .
     " It is using " . $size . "KB of RAM" . 
     " and has used " . $cputime . " of CPU time.");
  ]]>
  </command>
  <command cmd="^;mship (\S+)$" flag="s">
  <![CDATA[
    if (defined($::sn{lc $1}->{mship})) {
      $conn->privmsg($event->replyto, $1 . " is on: " . ASM::Util->commaAndify(sort @{$::sn{lc $1}->{mship}}));
    } else {
      $conn->privmsg($event->replyto, "I don't see $1.");
    }
  ]]>
  </command>
  <command cmd="^;source$">
  <![CDATA[
    $conn->privmsg($event->replyto, "source is at http://svn.linuxrulz.org/repos/antispammeta");
  ]]>
  </command>
  <command cmd="^;sql (main|log) (.*)" flag="d">
  <![CDATA[
    my $dbh = $::db->{DBH};
    if ($1 eq 'log') {
      $dbh = $::db->{DBH_LOG};
    }
    $::db->raw($conn, $event->{to}->[0], $dbh, $2);
  ]]>
  </command>
  <command cmd="^;monitor (\S+) (yes|no)$" flag="a">
  <![CDATA[
    my $chan = lc $1;
    my $switch = lc $2;
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    $::channels->{channel}->{$chan}->{monitor} = $switch;
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "Monitor flag for $chan set to $switch");
  ]]>
  </command>
  <command cmd="^;help$">
  <![CDATA[
    $conn->privmsg($event->replyto, "command list is at http://antispammeta.net/syntax.txt ; see also http://meta.wikimedia.org/wiki/User:WHeimbigner/AntiSpamMeta (not as up to date but contains some additonal info)");
    $conn->privmsg($event->replyto, "You can also get faster help by bugging ow, DLa\x02\x02nge, tom\x02\x02aw, or mari\x02\x02enz");
  ]]>
  </command>
  <command cmd="^;db$">
  <![CDATA[
    $conn->privmsg($event->replyto, "db is at http://antispammeta.net/query.html");
  ]]>
  </command>
  <command cmd="^;query (\S+) (\S+)$">
  <![CDATA[
    my $channel = $1;
    my @nuh = split(/(\!|\@)/, $2);
    my $result = $::db->query($channel, $nuh[0], $nuh[2], $nuh[4]);
    $conn->privmsg($event->replyto, "$result results found.");
  ]]>
  </command>
  <command cmd="^;investigate (\S+) *$">
  <![CDATA[
    my $nick = lc $1;
    unless (defined($::sn{$nick})) {
      $conn->privmsg($event->replyto, "I don't see $nick in my state tracking database, so I can't run any queries on their info, sorry :(" .
        " You can try https://antispammeta.net/cgi-bin/secret/investigate.pl?nick=$nick instead!");
      return;
    }
    my $person = $::sn{$nick};
    my $dbh = $::db->{DBH};

    my $mnicks = $dbh->do("SELECT * from $::db->{ACTIONTABLE} WHERE nick like " .    $dbh->quote($nick) . ';');
    my $musers = $dbh->do("SELECT * from $::db->{ACTIONTABLE} WHERE user like " .    $dbh->quote($person->{user}) . ';');
    my $mhosts = $dbh->do("SELECT * from $::db->{ACTIONTABLE} WHERE host like " .    $dbh->quote($person->{host}) . ';');
    my $maccts = $dbh->do("SELECT * from $::db->{ACTIONTABLE} WHERE account like " . $dbh->quote($person->{account}) . ';');
    my $mgecos = $dbh->do("SELECT * from $::db->{ACTIONTABLE} WHERE gecos like " .   $dbh->quote($person->{gecos}) . ';');

    my $ip = ASM::Util->getNickIP($nick);
    my $matchedip = 0;
    $matchedip = $dbh->do("SELECT * from $::db->{ACTIONTABLE} WHERE ip = " . $dbh->quote($ip) . ';') if defined($ip);
    $mnicks =~ s/0E0/0/;
    $musers =~ s/0E0/0/;
    $mhosts =~ s/0E0/0/;
    $maccts =~ s/0E0/0/;
    $mgecos =~ s/0E0/0/;
    $matchedip =~ s/0E0/0/;
    $conn->privmsg($event->replyto, "I found $mnicks matches by nick, $musers user matches, $mhosts by hostname, " .
                                 "$maccts by NickServ account, $mgecos by gecos field, and $matchedip by real IP.");
  ]]>
  </command>
  <command cmd="^;investigate2 (\S+) ?(\d*)$" flag="s">
  <![CDATA[
    my $nick = lc $1;
    my $skip = 0;
    $skip = $2 if (defined($2) and ($2 ne ""));
    foreach my $xcommand ( @{$::commands->{command}} )
    { 
      next unless $xcommand->{cmd} eq '^;investigate (\S+) *$';
      if (";investigate $nick" =~ /$xcommand->{cmd}/) {
        eval $xcommand->{content};
        warn $@ if $@;
        last;
      }
    }
    unless (defined($::sn{$nick})) {
#      $conn->privmsg($event->replyto, "I don't see $nick in my state tracking database, so I can't run any queries on their info, sorry :(" .
#        " You can try https://antispammeta.net/cgi-bin/secret/investigate.pl?nick=$nick instead!");
# This message gets sent when ;investigate gets called above.
      return;
    }
    my $person = $::sn{$nick};
    my $dbh = $::db->{DBH};

    my $query = "SELECT * from $::db->{ACTIONTABLE} WHERE nick like " . $dbh->quote($nick) .
                                                     ' or user like ' . $dbh->quote($person->{user}) . 
                                                     ' or host like ' . $dbh->quote($person->{host}) .
                                                  ' or account like ' . $dbh->quote($person->{account}) .
                                                    ' or gecos like ' . $dbh->quote($person->{gecos});
    my $ip = ASM::Util->getNickIP($nick);
    if (defined($ip)) {
      $query = $query . ' or ip = ' . $dbh->quote($ip);
    }
    $query = $query . " order by time desc limit $skip,10;";
    ASM::Util->dprint($query, 'mysql');
    my $query_handle = $dbh->prepare($query);
    $query_handle->execute();
    my $dq = '';
    if (defined($ip)) {
      $dq = '&realip=' . join '.', unpack 'C4', pack 'N', $ip;
    }
    my @data = @{$query_handle->fetchall_arrayref()};
    if (@data) {
      $conn->privmsg($event->replyto, 'Sending you the results ( https://antispammeta.net/cgi-bin/secret/investigate.pl?nick=' . uri_escape($nick) .
        '&user=' . uri_escape($person->{user}) . '&host=' . uri_escape($person->{host}) . '&account=' . uri_escape($person->{account}) .
        '&gecos=' . uri_escape($person->{gecos}) . "$dq )");
    } else {
      $conn->privmsg($event->replyto, 'No results to send!');
    }
#    reverse @data;
#$data will be an array of arrays,
    my ($xindex, $xtime, $xaction, $xreason, $xchannel, $xnick, $xuser, $xhost, $xip, $xgecos, $xaccount, $xbynick, $xbyuser, $xbyhost, $xbygecos, $xbyaccount ) = 
       (   0,      1,       2,        3,         4,       5,      6,      7,     8,     9,       10,        11,       12,        13,       14,   15);
    foreach my $line (@data) {
      my $reason = ''; my $channel = '';
      $reason = ' (' . $line->[$xreason] . ')' if defined($line->[$xreason]);
      $channel = ' on' . $line->[$xchannel] if defined($line->[$xchannel]);
      $conn->privmsg($event->nick, '#' . $line->[$xindex] . ': ' . $line->[$xtime] . ' ' .
       $line->[$xnick] . '!' . $line->[$xuser] . '@' . $line->[$xhost] . ' (' . $line->[$xgecos] . ') ' . 
       $line->[$xaction] . $reason . $channel . ' by ' . $line->[$xbynick]); # . "\n";
    }
    if (@data) {
      $conn->privmsg($event->nick, "Only 10 results are shown at a time. For more, do ;investigate2 $nick " . ($skip+10) . '.');
    }
  ]]>
  </command>
  <command cmd="^;userx add (\S+) (\S+)$" flag="a">
  <![CDATA[
    my $acct = lc $1;
    my $flags = $2;
    my %hasflagshash = ();
    foreach my $item (split(//, $::users->{person}->{lc $::sn{lc $event->{nick}}->{account}}->{flags})) {
      $hasflagshash{$item} = 1;
    }
    foreach my $flag (split(//, $flags)) {
      if (!defined($hasflagshash{$flag})) {
        $conn->privmsg($event->replyto, "You can't give a flag you don't already have.");
        return;
      }
    }
    if ($flags =~ /d/i) {
      $conn->privmsg($event->replyto, "The d flag may not be assigned over IRC. Edit the configuration manually.");
      return;
    }
    $::users->{person}->{$acct} = { 'flags' => $flags };
    ASM::XML->writeUsers();
    $conn->privmsg($event->replyto, "Flags for NickServ account $acct set to $flags");
  ]]>
  </command>
  <command cmd="^;user add (\S+) ?(\S*)$" flag="a">
  <![CDATA[
    $conn->privmsg($event->replyto, "This command has been deprecated");
  ]]>
  </command>
  <command cmd="^;userx? flags (\S+) ?$">
  <![CDATA[
    my $nick = lc $1;
    if (defined($::users->{person}->{$nick}->{flags})) {
      $conn->privmsg($event->replyto, "Flags for $nick: $::users->{person}->{$nick}->{flags}");
    } else {
      $conn->privmsg($event->replyto, "$nick has no flags");
    }
  ]]>
  </command>
  <command cmd="^;userx? flags (\S+) (\S+)$" flag="a">
  <![CDATA[
    my $nick = lc $1;
    my $flags = $2;
    my %hasflagshash = ();
    foreach my $item (split(//, $::users->{person}->{lc $::sn{lc $event->{nick}}->{account}}->{flags})) {
      $hasflagshash{$item} = 1;
    }
    foreach my $flag (split(//, $flags)) {
      if (!defined($hasflagshash{$flag})) {
        $conn->privmsg($event->replyto, "You can't give a flag you don't already have.");
        return;
      }
    }
    if ($flags =~ /d/i) {
      $conn->privmsg($event->replyto, "The d flag may not be assigned over IRC. Edit the configuration manually.");
      return;
    }
    $::users->{person}->{$nick}->{flags} = $flags;
    ASM::XML->writeUsers();
    $conn->privmsg($event->replyto, "Flags for $nick set to $flags");
  ]]>
  </command>
  <command cmd="^;userx? del (\S+)$" flag="a">
  <![CDATA[
    my $nick = lc $1;
    delete($::users->{person}->{$nick});
    ASM::XML->writeUsers();
    $conn->privmsg($event->replyto, "Byebye $nick");
  ]]>
  </command>
  <command cmd="^;target (\S+) (\S+) ?(\S*)$" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = lc $2;
    my $level= $3;
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    if ($level eq '') { $level = 'low'; }
    unless (defined($::channels->{channel}->{$chan}->{msgs})) {
      $::channels->{channel}->{$chan}->{msgs} = {};
    }
    unless (defined($::channels->{channel}->{$chan}->{msgs}->{$level})) {
      $::channels->{channel}->{$chan}->{msgs}->{$level} = [];
    }
    my @tmphl = @{$::channels->{channel}->{$chan}->{msgs}->{$level}};
    push(@tmphl, $nick);
    $::channels->{channel}->{$chan}->{msgs}->{$level} = \@tmphl;
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "$nick added to $level risk messages for $chan");
  ]]>
  </command>
  <command cmd="^;detarget (\S+) (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    my $nick = $2;
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    foreach my $risk ( keys %::RISKS ) {
      next unless defined($::channels->{channel}->{$chan}->{msgs}->{$risk});
      my @ppl = @{$::channels->{channel}->{$chan}->{msgs}->{$risk}};
      @ppl = grep { lc $_ ne lc $nick } @ppl;
      $::channels->{channel}->{$chan}->{msgs}->{$risk} = \@ppl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "$nick removed from targets for $chan");
  ]]>
  </command>
  <command cmd="^;showhilights (\S+) *$" flag="h">
  <![CDATA[
    my $nick = lc $1;
    my @channels = ();
    foreach my $chan (keys(%{$::channels->{channel}})) {
      foreach my $level (keys(%{$::channels->{channel}->{$chan}->{hilights}})) {
        if (grep(/^${nick}$/i, @{$::channels->{channel}->{$chan}->{hilights}->{$level}})) {
          push @channels, $chan . " ($level)";
        }
      }
    }
    if (! @channels) {
      $conn->privmsg($event->replyto, "$nick isn't on any hilights");
    } else {
      $conn->privmsg($event->replyto, "$nick is hilighted for " . join(', ', @channels));
    }
  ]]>
  </command>
  <command cmd="^;hilight (\S+) (\S+) ?(\S*)$" flag="h">
  <![CDATA[
    my $chan = $1;
    my @nicks = split(/,/,$2);
    my $level= $3;
    if ($level eq '') { $level = 'info'; }
    $level = lc $level;
    if ($level !~ /^(disable|debug|info|low|medium|high|opalert)$/) {
      $conn->privmsg($event->replyto, "Error: I don't recognize $level as a valid level.");
      return;
    }
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    unless (defined($::channels->{channel}->{$chan}->{hilights})) {
      $::channels->{channel}->{$chan}->{hilights} = {};
    }
    unless (defined($::channels->{channel}->{$chan}->{hilights}->{$level})) {
      $::channels->{channel}->{$chan}->{hilights}->{$level} = [];
    }
    foreach my $nick (@nicks) {
      my @tmphl = @{$::channels->{channel}->{$chan}->{hilights}->{$level}};
      push(@tmphl, $nick);
      $::channels->{channel}->{$chan}->{hilights}->{$level} = \@tmphl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, ASM::Util->commaAndify(@nicks) . " added to $level risk hilights for $chan");
  ]]>
  </command>
  <command cmd="^;dehilight (\S+) (\S+)" flag="h">
  <![CDATA[
    my $chan = $1;
    my @nicks = split(/,/, $2);
    my $link = ASM::Util->getLink(lc $chan);
    if ( lc $link ne lc $chan ) {
      $conn->privmsg($event->replyto, "Error: $chan is linked to $link - use $link instead.");
      return;
    }
    foreach my $risk ( keys %::RISKS ) {
      next unless defined($::channels->{channel}->{$chan}->{hilights}->{$risk});
      my @ppl = @{$::channels->{channel}->{$chan}->{hilights}->{$risk}};
      foreach my $nick (@nicks) {
        @ppl = grep { lc $_ ne lc $nick } @ppl;
      }
      $::channels->{channel}->{$chan}->{hilights}->{$risk} = \@ppl;
    }
    ASM::XML->writeChannels();
    $conn->privmsg($event->replyto, "Removing hilights for " . ASM::Util->commaAndify(@nicks) . " in $chan");
  ]]>
  </command>
  <command cmd="^;join (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    unless (defined($::channels->{channel}->{$chan})) {
      $::channels->{channel}->{$chan} = { };
      ASM::XML->writeChannels();
    }
    $conn->join($chan);
    my @autojoins = @{$::settings->{autojoins}};
    @autojoins = (@autojoins, $chan);
    $::settings->{autojoins} = \@autojoins;
    ASM::XML->writeSettings();
  ]]>
  </command>
  <command cmd="^;part (\S+)" flag="a">
  <![CDATA[
    my $chan = $1;
    $conn->part($chan);
    my @autojoins = @{$::settings->{autojoins}};
    @autojoins = grep { lc $_ ne lc $chan } @autojoins;
    $::settings->{autojoins} = \@autojoins;
    ASM::XML->writeSettings();
  ]]>
  </command>
  <command cmd="^;sl (.*)" flag="d">
  <![CDATA[
    $conn->sl($1);
  ]]>
  </command>
  <command cmd="^;quit ?(.*)" flag="a">
  <![CDATA[
    $conn->quit($1);
  ]]>
  </command>
  <command cmd="^;ev (.*)" flag="d">
  <![CDATA[
    eval $1; warn $@ if $@;
  ]]>
  </command>
  <command cmd="^;rehash$" flag="a">
  <![CDATA[
    ASM::XML->readXML();
    my @strbl = io('string_blacklist.txt')->getlines;
    chomp @strbl;
    @::string_blacklist = @strbl;
    my @eline=io('exempt.txt')->getlines;
    chomp @eline;
    %::eline = ();
    foreach my $item (@eline) {
	$::eline{lc $item} = 1;
    }
    $conn->privmsg($event->replyto, 'config files were re-read');
  ]]>
  </command>
  <command cmd="^;say (.*)" flag="t">
  <![CDATA[
    $conn->privmsg($event->replyto, $1);
  ]]>
  </command>
  <command cmd="^;do (.*)" flag="t">
  <![CDATA[
    $conn->me($event->replyto, $1);
  ]]>
  </command>
  <command cmd="^;exempt (.*)" flag="o">
  <![CDATA[
    $conn->privmsg($event->replyto, "This command is now deprecated. Use ;restrict nick/account/host lineToRestrict +notrigger instead, i.e. ;restrict account eir +notrigger");
  ]]>
  </command>
  <command cmd="^;restrict (nick|account|host) (\S+) (\+|-)([a-z]+)$" flag="o">
  <![CDATA[
    my ($type, $who, $mode, $restriction) = ($1, lc $2, $3, $4);
    if ($mode eq '-') {
      delete $::restrictions->{$type . 's'}->{$type}->{$who}->{$restriction};
      $conn->privmsg($event->replyto, "Removed $restriction restriction for $type $who");
    }
    if ($mode eq '+') {
      if (! defined($::restrictions->{$type . 's'}->{$type}->{$who})) {
        $::restrictions->{$type . 's'}->{$type}->{$who} = {};
      }
      $::restrictions->{$type . 's'}->{$type}->{$who}->{$restriction} = $restriction;
      $conn->privmsg($event->replyto, "Added $restriction restriction for $type $who");
    }
    ASM::XML->writeRestrictions();
  ]]>
  </command>
  <command cmd="^\!ops ?(#\S+)? ?(.*)" nohush="nohush">
  <![CDATA[
    if (ASM::Util->notRestricted(lc $event->{nick}, "noops")) {
      my $tgt = lc $event->{to}->[0];
      $tgt = lc $1 if (defined($1));
      my $msg = $1;
      $msg = $2 if defined($2);
      unless (defined($::sc{$tgt}{users}{lc $event->{nick}})) {
        return; #they're not on the channel they're calling !ops for
      }
      unless (defined($::ignored{$tgt}) && ($::ignored{$tgt} >= $::RISKS{'opalert'})) {
        if (lc $event->{to}->[0] eq '##linux') {
          $conn->privmsg($event->{nick}, "I've summoned op attention. In the future, please use /msg " .
                         "$conn->{_nick} !ops $event->{to}->[0] reasonGoesHere  - this allows ops to " .
                         "be notified while minimizing channel hostility.");
        } elsif ((lc $event->{to}->[0] eq '#wikipedia-en-help') && (!defined($msg))) {
          $conn->privmsg($event->{nick}, "I've summoned op attention, but in the future, please specify " .
                         "a reason, e.g. !ops reasongoeshere - so ops know what is going on. Thanks! :)");
        } elsif (lc $event->{to}->[0] eq lc $conn->{_nick}) {
          if (lc $tgt eq lc $conn->{_nick}) { # they privmsged the bot without providing a target
            $conn->privmsg($event->{nick}, "Sorry, it looks like you've tried to use the !ops command " .
                           "via PM but haven't specified a target. Try again with /msg $conn->{_nick} " .
                           "!ops #channelGoesHere ReasonGoesHere");
            return;
          } else {
            $conn->privmsg($event->{nick}, "Thanks, I'm notifying $tgt ops.");
          }
        }
        $::ignored{$tgt} = $::RISKS{'opalert'};
        $conn->schedule(30, sub { delete($::ignored{$tgt})});
        my $hilite=ASM::Util->commaAndify(ASM::Util->getAlert($tgt, 'opalert', 'hilights'));
        my $txtz = "[\x02$tgt\x02] - $event->{nick} wants op attention ($msg)";
        if ((time-$::sc{$tgt}{users}{lc $event->{nick}}{jointime}) > 90) {
#          return; #they've been on the channel for less than 90 seconds, probably nuisance botspam
          $txtz = $txtz . " " . $hilite;
        }
        my @tgts = ASM::Util->getAlert($tgt, 'opalert', 'msgs');
        ASM::Util->sendLongMsg($conn, \@tgts, $txtz);
        $::log->incident($tgt, "$tgt: $event->{nick} requested op attention\n");
      } else { # ops has recently been called
        if (lc $event->{to}->[0] eq '##linux') {
          $conn->privmsg($event->{nick}, "I've already been recently asked to summon op attention. " .
                         "In the future, please use /msg $conn->{_nick} !ops $event->{to}->[0] reasonGoesHere" .
                         "  - this allows ops to be notified while minimizing channel hostility.");
        } elsif (lc $event->{to}->[0] eq lc $conn->{_nick}) {
          if (lc $tgt eq lc $conn->{_nick}) { # they privmsged the bot without providing a target
            $conn->privmsg($event->{nick}, "Sorry, it looks like you've tried to use the !ops command " .
                           "via PM but haven't specified a target. Try again with /msg $conn->{_nick} " .
                           "!ops #channelGoesHere ReasonGoesHere");
            return;
          } else {
            $conn->privmsg($event->{nick}, "I've already recently notified $tgt ops.");
          }
        }
      }
    }
  ]]>
  </command>
  <command cmd="^;blacklist (.*)" flag="o">
  <![CDATA[
    my $str = lc $1;
    push(@::string_blacklist, $str);
    "$str\n" >> io 'string_blacklist.txt';
    $conn->privmsg($event->replyto, "$str blacklisted");
  ]]>
  </command>
  <command cmd="^;plugin (\S+) (\S+) (.*)" flag="p">
  <![CDATA[
    my $chan = $1;
    my $risk = $2;
    my $reason = $3;
    my $txtz = "\x03" . $::RCOLOR{$::RISKS{$risk}} . "\u$risk\x03 risk threat [\x02$chan\x02] - ".
            "\x02($event->{nick} plugin)\x02 - ${reason}; ping ";
    $txtz = $txtz . ASM::Util->commaAndify(ASM::Util->getAlert(lc $chan, $risk, 'hilights')) if (ASM::Util->getAlert(lc $chan, $risk, 'hilights'));
    $txtz = $txtz . ' !att-' . $chan . '-' . $risk;
    my @tgts = ASM::Util->getAlert($chan, $risk, 'msgs');
    if (length($txtz) <= 380) {
      $conn->privmsg(\@tgts, $txtz);
    } else {
      my $splitpart = rindex($txtz, " ", 380);
      $conn->privmsg(\@tgts, substr($txtz, 0, $splitpart));
      $conn->privmsg(\@tgts, substr($txtz, $splitpart));
    }
  ]]>
  </command>
</commands>
